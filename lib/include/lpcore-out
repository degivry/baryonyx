/* Copyright (C) 2016 INRA
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef ORG_VLEPROJECT_LP_LPCORE_OUT
#define ORG_VLEPROJECT_LP_LPCORE_OUT

#include <lpcore>
#include <ostream>
#include <iomanip>
#include <iterator>

namespace lp {

inline
std::ostream&
operator<<(std::ostream& os, const result& result)
{
    auto store = os.flags();

    os.flags(store | os.boolalpha);
    os << "optimal: " << result.optimal << '\n'
       << "value..: " << result.value << '\n'
       << "loop...: " << result.loop << '\n'
       << "vars...: ";

    std::copy(result.variable_name.begin(), result.variable_name.end(),
              std::ostream_iterator<std::string>(os, " "));

    os << '\n'
       << "values.: ";

    std::copy(result.variable_value.begin(), result.variable_value.end(),
              std::ostream_iterator<int>(os, " "));

    os << '\n';

    os.flags(store);

    return os;
}

} // namespace lp

#endif
