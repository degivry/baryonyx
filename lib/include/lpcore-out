/* Copyright (C) 2016 INRA
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef ORG_VLEPROJECT_LP_LPCORE_OUT
#define ORG_VLEPROJECT_LP_LPCORE_OUT

#include <iomanip>
#include <iterator>
#include <lpcore>
#include <numeric>
#include <ostream>

namespace lp {

inline std::ostream&
operator<<(std::ostream& os, const result& result)
{
    auto store = os.flags();

    os.flags(store | os.boolalpha);
    os << "solver................: " << result.method << '\n'
       << "solution found........: " << result.solution_found << '\n'
       << "value.................: " << result.value << '\n'
       << "loop..................: " << result.loop << '\n'
       << "constraints...........: " << result.constraints << '\n'
       << "remaining constraints.: " << result.remaining_constraints << '\n'
       << "variables.............: " << result.variables << '\n';

    if (result.variable_name.size() <= 20) {
        os << "vars..................: ";

        for (std::size_t i {0}, e{result.variable_name.size()}; i != e; ++i) {
            os << '[' << result.variable_name[i] << ',' <<
            result.variable_value[i] << ']';
            if ((i + 1 % 20) == 0 and i + 1 != e)
                os << "\n......................: ";
        }

        os << '\n';
    }

    os.flags(store);

    return os;
}

struct resume
{
    resume(const problem& pb)
      : variables{ 0, 0, 0 }
      , constraints{ 0, 0, 0, 0, 0 }
    {
        variables =
          std::accumulate(pb.vars.values.begin(),
                          pb.vars.values.end(),
                          variables,
                          [](std::array<long int, 3>& value, auto vv) {
                              switch (vv.type) {
                                  case lp::variable_type::real:
                                      value[0]++;
                                      break;
                                  case lp::variable_type::binary:
                                      value[1]++;
                                      break;
                                  case lp::variable_type::general:
                                      value[2]++;
                                      break;
                              }

                              return value;
                          });

        constraints[0] = pb.equal_constraints.size();
        constraints[1] = pb.greater_constraints.size();
        constraints[2] = pb.greater_equal_constraints.size();
        constraints[3] = pb.less_constraints.size();
        constraints[4] = pb.less_equal_constraints.size();
    }

    std::array<long int, 3> variables;
    std::array<long int, 5> constraints;
};

inline std::ostream&
operator<<(std::ostream& os, const resume& pb)
{
    return os << "nb variables: "
              << std::accumulate(pb.variables.begin(), pb.variables.end(), 0)
              << '\n'
              << "  ..... real: " << pb.variables[0] << '\n'
              << "  ... binary: " << pb.variables[1] << '\n'
              << "  .. general: " << pb.variables[2] << '\n'
              << "nb constraints: " << std::accumulate(pb.constraints.begin(),
                                                       pb.constraints.end(),
                                                       0)
              << '\n'
              << "  ........ =  : " << pb.constraints[0] << '\n'
              << "  ........ >  : " << pb.constraints[1] << '\n'
              << "  ........ >= : " << pb.constraints[2] << '\n'
              << "  ........ <  : " << pb.constraints[3] << '\n'
              << "  ........ <= : " << pb.constraints[4] << '\n';
}

} // namespace lp

#endif
